str = paste(PYTHON_PATH, SIMULATION_SCRIPT, start, stop, step, string, '--file', data_filename)
print(str)
system(str)
# data = read.csv(data_filename)
return (data)
# system(paste(python_path, start, stop, step, inputs, '--file', data_filename))
}
get_data(0, 100, 101, list(Insulin=1, AA=1))
get_data = function(start, stop, step, inputs){
inputs_vec = as.vector(unlist(inputs))
inputs_names = names(inputs)
string = ''
for (i in 1:length(inputs)){
s = paste0(inputs_names[i], '=', inputs_vec[i])
if (string == ''){
string=s
}else{
string = paste0(string, ', ', s)
}
}
print(string)
str = paste(PYTHON_PATH, SIMULATION_SCRIPT, start, stop, step, string, '--file', data_filename)
# print(str)
system(str)
# data = read.csv(data_filename)
return (data)
# system(paste(python_path, start, stop, step, inputs, '--file', data_filename))
}
get_data(0, 100, 101, list(Insulin=1, AA=1))
get_data = function(start, stop, step, inputs){
inputs_vec = as.vector(unlist(inputs))
inputs_names = names(inputs)
string = ''
for (i in 1:length(inputs)){
s = paste0(inputs_names[i], '=', inputs_vec[i])
if (string == ''){
string=s
}else{
string = paste0(string, ', ', s)
}
}
print(string)
str = paste(PYTHON_PATH, SIMULATION_SCRIPT, start, stop, step, string, '--file', data_filename)
# print(str)
# system(str)
# data = read.csv(data_filename)
return (data)
# system(paste(python_path, start, stop, step, inputs, '--file', data_filename))
}
get_data(0, 100, 101, list(Insulin=1, AA=1))
get_data = function(start, stop, step, inputs){
inputs_vec = as.vector(unlist(inputs))
inputs_names = names(inputs)
string = ''
for (i in 1:length(inputs)){
s = paste0(inputs_names[i], '=', inputs_vec[i])
if (string == ''){
string=s
}else{
string = paste0(string, ', ', s)
}
}
print(string)
str = paste(PYTHON_PATH, SIMULATION_SCRIPT, start, stop, step, string, '--file', data_filename)
# print(str)
# system(str)
# data = read.csv(data_filename)
# return (data)
# system(paste(python_path, start, stop, step, inputs, '--file', data_filename))
}
get_data(0, 100, 101, list(Insulin=1, AA=1))
get_data = function(start, stop, step, inputs){
inputs_vec = as.vector(unlist(inputs))
inputs_names = names(inputs)
string = ''
for (i in 1:length(inputs)){
s = paste0(inputs_names[i], '=', inputs_vec[i])
if (string == ''){
string=s
}else{
string = paste0(string, ', ', s)
}
}
print(string)
str = paste(PYTHON_PATH, SIMULATION_SCRIPT, start, stop, step, string, '--file', data_filename)
print(str)
# system(str)
# data = read.csv(data_filename)
# return (data)
# system(paste(python_path, start, stop, step, inputs, '--file', data_filename))
}
get_data(0, 100, 101, list(Insulin=1, AA=1))
get_data = function(start, stop, step, inputs){
inputs_vec = as.vector(unlist(inputs))
inputs_names = names(inputs)
string = ''
for (i in 1:length(inputs)){
s = paste0(inputs_names[i], '=', inputs_vec[i])
if (string == ''){
string=s
}else{
string = paste0(string, ', ', s)
}
}
print(string)
str = paste(PYTHON_PATH, SIMULATION_SCRIPT, start, stop, step, string, '--file', data_filename)
print(str)
# system(str)
# data = read.csv(data_filename)
# return (data)
# system(paste(python_path, start, stop, step, inputs, '--file', data_filename))
}
get_data(0, 100, 101, list(Insulin=1, AA=1))
get_data = function(start, stop, step, inputs){
inputs_vec = as.vector(unlist(inputs))
inputs_names = names(inputs)
string = ''
for (i in 1:length(inputs)){
s = paste0(inputs_names[i], '=', inputs_vec[i])
if (string == ''){
string=s
}else{
string = paste0(string, ', ', s)
}
}
print(string)
str = paste(PYTHON_PATH, SIMULATION_SCRIPT, start, stop, step, string, '--file', data_filename)
print(str)
system(str)
# data = read.csv(data_filename)
# return (data)
# system(paste(python_path, start, stop, step, inputs, '--file', data_filename))
}
get_data(0, 100, 101, list(Insulin=1, AA=1))
get_data(0, 100, 101, list(Insulin=1, AA=1))
get_data = function(start, stop, step, inputs){
inputs_vec = as.vector(unlist(inputs))
inputs_names = names(inputs)
string = ''
for (i in 1:length(inputs)){
s = paste0(inputs_names[i], '=', inputs_vec[i])
if (string == ''){
string=s
}else{
string = paste0(string, s)
}
}
print(string)
str = paste(PYTHON_PATH, SIMULATION_SCRIPT, start,
stop, step, '--file', data_filename,
string)
print(str)
system(str)
# data = read.csv(data_filename)
# return (data)
# system(paste(python_path, start, stop, step, inputs, '--file', data_filename))
}
get_data(0, 100, 101, list(Insulin=1, AA=1))
get_data = function(start, stop, step, inputs){
inputs_vec = as.vector(unlist(inputs))
inputs_names = names(inputs)
string = ''
for (i in 1:length(inputs)){
s = paste0(inputs_names[i], '=', inputs_vec[i])
if (string == ''){
string=s
}else{
string = paste0(string, s)
}
}
print(string)
str = paste(PYTHON_PATH, SIMULATION_SCRIPT, start,
stop, step, '--file', data_filename,
string)
print(str)
system(str)
data = read.csv(data_filename)
return (data)
# system(paste(python_path, start, stop, step, inputs, '--file', data_filename))
}
get_data(0, 100, 101, list(Insulin=1, AA=1))
get_data = function(start, stop, step, inputs){
inputs_vec = as.vector(unlist(inputs))
inputs_names = names(inputs)
string = ''
for (i in 1:length(inputs)){
s = paste0(inputs_names[i], '=', inputs_vec[i])
if (string == ''){
string=s
}else{
string = paste0(string, s)
}
}
print(string)
str = paste(PYTHON_PATH, SIMULATION_SCRIPT, start,
stop, step, '--file', data_filename,
string)
print(str)
system(str)
# data = read.csv(data_filename)
# return (data)
# system(paste(python_path, start, stop, step, inputs, '--file', data_filename))
}
get_data(0, 100, 101, list(Insulin=1, AA=1))
get_data = function(start, stop, step, inputs){
inputs_vec = as.vector(unlist(inputs))
inputs_names = names(inputs)
string = ''
for (i in 1:length(inputs)){
s = paste0(inputs_names[i], '=', inputs_vec[i])
if (string == ''){
string=s
}else{
string = paste(string, s)
}
}
print(string)
str = paste(PYTHON_PATH, SIMULATION_SCRIPT, start,
stop, step, '--file', data_filename,
string)
print(str)
system(str)
# data = read.csv(data_filename)
# return (data)
# system(paste(python_path, start, stop, step, inputs, '--file', data_filename))
}
get_data(0, 100, 101, list(Insulin=1, AA=1))
get_data = function(start, stop, step, inputs){
inputs_vec = as.vector(unlist(inputs))
inputs_names = names(inputs)
string = ''
for (i in 1:length(inputs)){
s = paste0(inputs_names[i], '=', inputs_vec[i])
if (string == ''){
string=s
}else{
string = paste(string, s)
}
}
print(string)
str = paste(PYTHON_PATH, SIMULATION_SCRIPT, start,
stop, step, '--file', data_filename,
'-i', string)
print(str)
system(str)
# data = read.csv(data_filename)
# return (data)
# system(paste(python_path, start, stop, step, inputs, '--file', data_filename))
}
get_data(0, 100, 101, list(Insulin=1, AA=1))
get_data = function(start, stop, step, inputs){
inputs_vec = as.vector(unlist(inputs))
inputs_names = names(inputs)
string = ''
for (i in 1:length(inputs)){
s = paste0(inputs_names[i], '=', inputs_vec[i])
if (string == ''){
string=s
}else{
string = paste(string, s)
}
}
print(string)
str = paste(PYTHON_PATH, SIMULATION_SCRIPT, start,
stop, step, '--file', data_filename,
'-i', string)
print(str)
system(str)
data = read.csv(data_filename)
return (data)
# system(paste(python_path, start, stop, step, inputs, '--file', data_filename))
}
get_data(0, 100, 101, list(Insulin=1, AA=1))
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
?geom_curve
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
?imageOutput
?renderImage
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
# check filenames exist
for (i in c(SIMULATION_SCRIPT, NETWORK_FNAME,
PYTHON_PATH, DATA_FILENAME)){
if (!file.exists(i)){
message(paste(i, 'does not exist'))
}
}
WD = '/home/ncw135/Documents/QualitativeModelFitting'
MODEL_DIR = file.path(WD, 'example_networks')
WEB_DIR = file.path(WD, 'web_interface')
APP_DIR = file.path(WEB_DIR, 'extended_pi3k_model')
NETWORK_FNAME = file.path(WEB_DIR, 'network.png')
NETWORK_FNAME
SIMULATION_SCRIPT = file.path(WEB_DIR, 'run_timeseries.py')
PYTHON_PATH = "/home/ncw135/miniconda3/envs/py36/bin/python"
DATA_FILENAME = file.path(WD, 'data_file.csv')
# check filenames exist
for (i in c(SIMULATION_SCRIPT, NETWORK_FNAME,
PYTHON_PATH, DATA_FILENAME)){
if (!file.exists(i)){
message(paste(i, 'does not exist'))
}
}
# check directories exist
directories = c(WD, MODEL_DIR, WEB_DIR, APP_DIR)
for (i in directories){
if (!dir.exists(i)){
message(paste('warning: ', i, 'does not exist'))
}
}
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
install.packages('ggthemer')
install.packages('ggthemr')
install.packages('ggthemr')
?
qplot
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
?geom_line
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
?checkboxGroupInput
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
x = list(a=1, b=1)
x
Reduce(function(x) paste(x, '=1'), x)
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
, ?wellPanel()
, ?wellPanel(
, ?wellPanel
?wellPanel
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
?actionButton
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
PLOTTABLE_SPECIES = file.path(WEB_DIR, 'plottable_species.txt')
# check filenames exist
for (i in c(SIMULATION_SCRIPT, NETWORK_FNAME,
PYTHON_PATH, DATA_FILENAME,
PLOTTABLE_SPECIES)) {
if (!file.exists(i)) {
message(paste(i, 'does not exist'))
}
}
if (string == '') {
string = s
} else{
string = paste(string, s)
}
get_data = function(start, stop, step, inputs) {
print(inputs)
inputs_vec = as.vector(unlist(inputs))
inputs_names = names(inputs)
string = ''
for (i in 1:length(inputs)) {
s = paste0(inputs_names[i], '=', inputs_vec[i])
if (string == '') {
string = s
} else{
string = paste(string, s)
}
}
str = paste(
PYTHON_PATH,
SIMULATION_SCRIPT,
start,
stop,
step,
'--file',
data_filename,
'-i',
string
)
message('string passed to python "', str, '"')
system(str)
data = read.csv(data_filename)
return (data)
}
plottable_species = read.csv(PLOTTABLE_SPECIES)
plottable_species
plottable_species = read.csv(PLOTTABLE_SPECIES)
plottable_species
as.char(plottable_species)
as.character(plottable_species)
as.vector(plottable_species)
as.vector.factor(plottable_species)
as.vector(plottable_species)
as.factor(plottable_species)
class(plottable_species)
class(plottable_species[, 0])
plottable_species[, 0]
plottable_species[, 1]
as.character(plottable_species[, 1])
plottable_species = as.character(plottable_species[, 1])
?selectInput
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
?split
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
x = list()
x['h'] = 4
x
runApp('web_interface/extended_pi3k_model')
?strsplit
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
install.packages('stack')
install.packages('Stack')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
install.packages('rsconnect')
rsconnect
rsconnect::setAccountInfo(name='ciaranwelsh',
token='3C8EFA62B2ABC8074EA3A42B1FF46617',
secret='Ou0e1y6yPqsB1nQOYdG6uxCSzyOkguOXvAfoimmX')
library(rsconnect)
rsconnect::deployApp(appDir = APP_DIR)
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
?imageOutput
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
?updateSelectizeInput
runApp('web_interface/extended_pi3k_model')
runApp('web_interface/extended_pi3k_model')
